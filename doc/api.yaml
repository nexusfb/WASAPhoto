openapi: 3.0.0 

info:
  title: WASAPhoto
  description: Multi user photo-sharing application
  version: 1.0.0

servers:
  - url: http://localhost:3000

tags:
  - name: login
    description: Login process
  - name: user
    description: Everything about a user
  - name: relationship
    description: Everything about relationships with other users
  - name: userPost
    description: Everything about a user post

components:

  securitySchemes:

    bearerAuthentication: 
      type: http
      scheme: bearer

  parameters:
  
    UserID:
      description: Immutable public user identifier
      schema: { $ref: "#/components/schemas/UserID" }
      name: user-id
      in: path
      required: true
    
    UserPostID:
      description: User post identifier
      schema: { $ref: "#/components/schemas/UserpostID" }
      name: userpost-id
      in: path
      required: true
    
    CommentID:
      description: Comment identifier
      schema: { $ref: "#/components/schemas/CommentID" }
      name: comment-id
      in: path
      required: true
    
    RelationUser:
      description: Immutable public user identifier used when creating/destroying relationships between users
      schema: { $ref: "#/components/schemas/UserID" }
      name: id
      in: path
      required: true
  
  responses:
  
    UnAuthorized:
      description: Forbidden, you do not have the necessary permissions.
      
    InternalServerError:
      description: The server encountered an Internal Error.

    NoContent:
      description: No content, No requested object is present on WASAPhoto.
      
    BadRequest: 
      description: The request was not compliant with the documentation.

  
  schemas:
  
    Username:
      description: Public changeable user-defined identifier
      type: string
      pattern: ^(?=[a-zA-Z0-9._]{5,20}$)(?!.*[_.]{2})[^_.].*[^_.]$
      minLength: 5
      maxLength: 20

    
    UserID:
      description: Public immutable server-defined identifier
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 9
      maxLength: 11
      readOnly: true
    
    UserpostID:
      description: User post identifier
      type: integer
      format: int64
    
    CommentID:
      description: Comment identifier
      type: integer
      format: int64
    
    UserProfile:
      description: |-
        This object represents the profile of a user.
        The profile has a username, bio, profile picture, photos, number of photos, number of followers and number of following.
      type: object
      properties:
        UserID: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
        bio:
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the user, a sequence of numbers, anything.
            It is displayed to other users underneath the profile picture.
          type: string
          pattern: ^.*$
          minLength: 0
          maxLength: 150
        profilePic:
          description: Photo that is displayed next to username, bio and counts in the user profile
          type: string
          format: binary
          minLength: 0
          maxLength: 2147483647
        userPosts:
          description: URL to the path of userposts of the user
          type: string
          pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
          minLength: 0
          maxLength: 2048
        nPhotos:
          description: Number of posts uploaded by the user
          type: integer
          minimum: 0
          maximum: 999
        nFollowers:
          description: Number of followers
          type: integer
          minimum: 0
          maximum: 999
        nFollowing:
          description: number of following
          type: integer
          minimum: 0
          maximum: 999
    
    UserPost:
      description: |-
        This object represents the post of a user.
        The post has an UserPostID, authorID, author username, date, caption, photo.
      type: object
      properties:
        UserpostID: { $ref: "#/components/schemas/UserpostID" }
        authorID: { $ref: "#/components/schemas/UserID" }
        author: { $ref: "#/components/schemas/Username" }
        date:
          description: Date in which the post was created
          type: string
          format: date-time
          minLength: 0
          maxLength: 20
        caption:
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the photo, a sequence of numbers, anything.
            It is displayed to other users underneath the photo.
          type: string
          pattern: ^.*$
          minLength: 0
          maxLength: 150
        photo:
          description: Photo content of the user post
          type: string
          format: binary
          minLength: 0
          maxLength: 2147483647
        nLikes:
          description: Number of likes
          type: integer
          minimum: 0
          maximum: 999
        nComments:
          description: Number of comments
          type: integer
          minimum: 0
          maximum: 99
    
    ShortProfile:
      description: |-
        This object represents the short version of the profile of a user.
        It is needed when retrieving a list of users (followers, likes, bans, following).
        The profile has a username and a profile picture.
      type: object
      properties:
        UserID: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
        profilePicURL:
          description: URL to profile picture of the user
          type: string
          pattern: ^(https?:\/\/.*\.(?:png|jpg|jpeg))$
          minLength: 0
          maxLength: 2048
              
    Comment:
      description: |-
        This object represents a comment to a photo.
        A comment has an id, author, authorID, date, content.
      type: object
      properties:
        CommentID: { $ref: "#/components/schemas/CommentID" }
        author: { $ref: "#/components/schemas/Username" }
        authorID: { $ref: "#/components/schemas/UserID" }
        date:
          description: Date of creation of the comment
          type: string
          format: date-time
          minLength: 0
          maxLength: 20
        content:
          description: Content of the comment
          type: string
          pattern: ^.*$
          minLength: 0
          maxLength: 150
          
paths:

  /session:
    # This is the login path
    
    post:
      tags: ["login"]
      operationId: doLogin
      summary: Log in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: Username of the user who wants to login
        content:
          application/json: 
              schema: { $ref: "#/components/schemas/Username" }
        required: true

      responses:
        '201':
          description: User log-in action successful 
          content:
              application/json: 
                schema: { $ref: "#/components/schemas/UserID" }
  
  /users/{user-id}:
    # This is the user profile path
    
    parameters:
      - $ref: "#/components/parameters/UserID"

    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getUserProfile
      summary: Get the profile of the specified user 
      description: Return the profile of the specified user.
      
      responses: 
        "200":
          description: User profile returned successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/UserProfile" } 
        
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    put:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: setMyUserName
      summary: Modify the profile of the specified user
      description: |-
        Modifies username or/and bio or/and profile pic of the specified user with the username/bio/profile pic specified in the body of the request.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserProfile" }

      responses: 
        "200":
          description: User profile updates successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/UserProfile" }
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{user-id}/userposts/:
    # In this path each user has the collection of ID of their user posts
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getUserPosts
      summary: Get the collection of user posts of a user 
      description: |-
        The userposts has the ID of userpost of user.
        It should return the collection of the related userposts in reverse cronological order.
        
      responses:
        "200":
          description: Collection of user posts of the user returned successfully
          content:
            application/json:
              schema:
                description: Collection of user's posts
                type: array
                items: { $ref: "#/components/schemas/UserPost" }
                minItems: 0
                maxItems: 999
        
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: uploadPhoto
      summary: Add user post ID to the collection
      description: |-
        Add user post in the request body to the public collection of user posts.
        Then add the user post ID to the private collection of userpostsID.
        The server will create a new unique ID, the client can find it in the response.
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserPost" }

      responses: 
        "201":
          description: User post created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserpostID" }
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{user-id}/stream/:
    # In this path each user has the collection of ID of userpost of users they follow
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getMyStream
      summary: Get the collection of user posts recently uploaded by followed users
      description: |-
        The stream has the ID of userpost of users followed.
        It should return the collection of the followed user's posts in reverse cronological order.
  
      responses:
        "200":
          description: Collection of user posts of followed users returned successfully
          content:
            application/json:
              schema:
                description: Array of followed users posts
                type: array
                items: { $ref: "#/components/schemas/UserPost" }
                minItems: 0
                maxItems: 999
        
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{user-id}/banned/:
    # In this path each user has the collection of user IDs they have banned
    parameters:
    - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getBannedUsers
      summary: Get the collection of banned users
      description: |-
        The banned collection is a collection of user IDs.
        It should return the collection of the users short profiles that have been banned by the user in the path.
      
      responses: 
        "200":
          description: Collection of banned users returned successfully 
          content:
            application/json: 
              schema:
                description: Array of banned user's short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    
  
  /users/{user-id}/banned/{id}:
    # This is the path to a specific user ID which belongs to the collection of banned users
    parameters:
      - $ref: "#/components/parameters/RelationUser"
      - $ref: "#/components/parameters/UserID"

    put:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: banUser
      summary: Add user ID to banned collection
      description: Add a user ID to the collection of banned user IDs.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }

      responses:
        "201":
          description: User has been banned successfully 
          content:
            application/json:
              schema:
                description: array of banned user's short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
                
    delete:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: unbanUser
      summary: Remove user ID from banned collection
      description: Delete userID from the collection of banned users IDs.
  
      responses:
        "204": { description: User has been unbanned successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Banned user not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{user-id}/followers/:
    # This is the path to the collection of IDs of the user's followers
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getFollowers
      summary: Get the collection of followers
      description: |-
        The followers collection is a collection of user IDs.
        It should return the collection of the users' short profiles that belong to the collection of followers IDs.
      
      responses:
        "200":
          description: Collection of followers returned successfully
          content:
            application/json:
              schema:
                description: array of followers' short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }  
  
  /users/{user-id}/followings/:
    # This is the path to the collection of IDs of the users that are followed by the user.
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getFollowing
      summary: Get the collection of following users
      description: |-
        The followings collection is a collection of user IDs.
        It should return the collection of the users' short profiles that belong to the collection of users that are followed by the user
      
      responses:
        "200":
          description: List of following returned successfully
          content:
            application/json:
              schema:
                description: array of short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
  
  /users/{user-id}/followings/{id}:
    # This is the path to a specific user ID which belongs to the collection of followings
    parameters:
      - $ref: "#/components/parameters/RelationUser"
      - $ref: "#/components/parameters/UserID"
    
    put:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: followUser
      summary: Add user ID to followings collection
      description: Add a user ID to followings collection.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      
      responses:
        "201":
          description: User has been followed successfully
          content:
            application/json:
              schema:
                description: Array of following users' short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }        
        '403': {$ref : '#/components/responses/UnAuthorized'}        
        "500": { $ref: "#/components/responses/InternalServerError" }
                
    delete:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: unfollowUser
      summary: Remove user ID from followings collection
      description: Delete username from following collection.
      
      responses:
        "204": {description: User has been unfollowed successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Folloed user not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /usersposts/{userpost-id}:
    # This is the path to a specific user post
    parameters:
      - $ref: "#/components/parameters/UserPostID"

    delete:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: deletePhoto
      summary: delete user post
      description: Delete user post from users posts collection.
      
      responses:
        "204": { description: Photo has been successfully deleted }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User post not found }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /usersposts/{userpost-id}/likes/:
    # this is the path to the collection of likes of the specified user post
    parameters:
      - $ref: "#/components/parameters/UserPostID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: getLikes
      summary: Get the collection of likes of the user post
      description: Return the collection of likes of the user post.
      
      responses:
        "200":
          description: Collection of likes returned successfully
          content:
            application/json:
              schema:
                description: Array of short profiles of users in the likes collection
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /usersposts/{userpost-id}/likes/{id}:
    # this is the path to a specfic user that liked the user post
    parameters:
      - $ref: "#/components/parameters/UserPostID"  
      - $ref: "#/components/parameters/RelationUser"
    
    put:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: likePhoto
      summary: Add a like to the collection of likes
      description: |-
        Add a user ID to likes collection.
        Notice that this can be done only if the user ID does not match to the author ID of the user Post.
      
      responses:
        "201":
          description: User's like addedd successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPost" }
        "400": { $ref: "#/components/responses/BadRequest" }        
        '403': {$ref : '#/components/responses/UnAuthorized'}        
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: unlikePhoto
      summary: Remove like from the collection of likes
      description: |- 
        Remove a user ID from the likes collections.
        Notice this can be done only if the user ID corresponds to the id of the logged user.
      
      responses:
        "204": { description: like has been successfully removed }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Your like was not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /usersposts/{userpost-id}/comments/:
    # this is the path to the collection of comments ID of the specified user post
    parameters:
      - $ref: "#/components/parameters/UserPostID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: getComments
      summary: Get the comments of the user post
      description: Return the collection of comments of the user post.
      
      responses:
        "200":
          description: Collection of comments returned successfully
          content:
            application/json:
              schema:
                description: Array of comments
                type: array
                items: { $ref: "#/components/schemas/Comment" }
                minItems: 0
                maxItems: 99
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: commentPhoto
      summary: Add a comment to the comments collection
      description: |-
        Add comment in the request body to the public collection of comments.
        Then add the comment ID to the private collection of comments.
        The server will create a new unique ID, the client can find it in the response.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      
      responses:
        "201":
          description: Comment created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentID" }
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
    
  
  /comments/{comment-id}:
    # This is the path to a specific comment
    parameters:
      - $ref: "#/components/parameters/CommentID"

    delete:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: uncommentPhoto
      summary: Remove comment from the comments collection
      description: |-
        Remove comment from the system.
        A comment can be removed only if it belongs to the logged user.
      
      responses:
        "204": { description: Comment has been successfully deleted }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: Comment not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
