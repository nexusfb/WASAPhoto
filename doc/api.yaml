openapi: 3.0.0 
info:
  title: WASAPhoto
  description: Multi user photo-sharing application
  version: 1.0.0

servers:
  - url: http://localhost:3000

components:

  securitySchemes:
    bearerAuthentication: 
      type: http
      scheme: bearer

  parameters:
    UserID:
      description: user identifier
      schema: { $ref: "#/components/schemas/UserID" }
      name: user-id
      in: path
      required: true
    
    UserName:
      description: user unique name
      schema: { $ref: "#/components/schemas/Username" }
      name: user-name
      in: path
      required: true
    
    UserPostID:
      description: user identifier
      schema: { $ref: "#/components/schemas/UserpostID" }
      name: userpost-id
      in: path
      required: true
    
    CommentID:
      description: comment identifier
      schema: { $ref: "#/components/schemas/CommentID" }
      name: comment-id
      in: path
      required: true
    
  schemas: 
    Username:
      description: user unique name
      type: string 
      example: "Aldo"
      minLength: 2
      maxLength: 15
    
    UserID:
      description: user identifier
      type: integer
      format: int64
    
    UserpostID:
      description: user identifier
      type: integer
      format: int64
    
    CommentID:
      description: comment identifier
      type: integer
      format: int64
    
    UserProfile:
      description: |-
        This object represents the profile of a user.
        The profile has a username, bio, profile picture, photos, number of photos, number of followers and number of following.
      type: object
      properties:
        id: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
        bio: 
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the user, a sequence of numbers, anything.
            It is displayed to other users underneath the profile picture.
          type: string
          example: "Simplicity is the key to happiness"
          minLength: 0
          maxLength: 150
        profilePic:
          description: profile picture
          type: object
          properties:
            url:
              description: url of the photo
              type: string
              minLength: 0
              maxLength: 100
        userPosts:
          description: userâ€™s photos in reverse chronological order
          type: array
          items: {$ref: '#/components/schemas/UserPost'}
          minItems: 0
          maxItems: 999
        nPhotos:
          description: number of uploaded photos
          type: integer
          example: 55
          minimum: 0
          maximum: 999
        nFollowers:
          description: number of followers
          type: integer
          example: 120
          minimum: 0
          maximum: 999
        nFollowing:
          description: number of following
          type: integer
          example: 110
          minimum: 0
          maximum: 999
    
    UserPost:
      description: |-
        This object represents the post of a user.
        The post has an UserPostID, authorID, author username, date, caption, photo.
      type: object
      properties:
        id: { $ref: "#/components/schemas/UserpostID" }
        authorID: { $ref: "#/components/schemas/UserID" }
        author: { $ref: "#/components/schemas/Username" }
        date:
          description: date in which the post was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        caption:
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the photo, a sequence of numbers, anything.
            It is displayed to other users underneath the photo.
          type: string
          example: "I love this place"
          minLength: 0
          maxLength: 150
        photo:
          description: Photo content of the user post
          type: string
          format: binary
        nLikes:
          description: number of likes
          type: integer
          example: 12
          minimum: 0
          maximum: 999
        nComments:
          description: number of comments
          type: integer
          example: 3
          minimum: 0
          maximum: 99
    
    ShortProfile:
      description: |-
        This object represents the short version of the profile of a user.
        It is needed when retrieving a list of users (followers, likes, bans, following).
        The profile has a username and a profile picture.
      type: object
      properties:
        username: { $ref: "#/components/schemas/Username" }
        profilePic:
          description: profile picture
          type: object
          properties:
            url:
              description: url of the photo
              type: string
              minLength: 0
              maxLength: 100
    Comment:
      description: |-
        This object represents a comment to a photo.
        A comment has an authorID, author, date, content.
      type: object
      properties:
        id: { $ref: "#/components/schemas/CommentID" }
        author: { $ref: "#/components/schemas/Username" }
        authorID: { $ref: "#/components/schemas/UserID" }
        date:
          description: date of creation of the comment
          type: string
          format: date-time
        content:
          description: content of the comment
          type: string
          minLength: 0
          maxLength: 150
    
    
    

paths:
  /session:
    post:
      tags: ["login"]
      operationId: doLogin
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: username of the user
        content:
          application/json: 
              schema: { $ref: "#/components/schemas/Username" }
        required: true

      responses:
        '201':
          description: User log-in action successful 
          content:
              application/json: 
                schema: { $ref: "#/components/schemas/UserID" }
  
  /users/{user-id}/:
    parameters:
      - $ref: "#/components/parameters/UserID"

    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getUserProfile
      summary: Get the profile of the specified user 
      description: Return the profile of the specified user.
      
      responses: 
        "200":
          description: User profile returned successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/UserProfile" } 

    put:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: setMyUserName
      summary: Change profile of the specified user
      description: |-
        Modifies username or/and bio or/and profile pic of the specified user with the username/bio/profile pic specified in the body of the request.
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserProfile" }

      responses: 
        "200":
          description: User profile updates successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/UserProfile" }
  
  /users/{user-id}/userposts/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: uploadPhoto
      summary: Create new user post
      description: |-
        Create a new user post using the content in the request body.
        The server will create a new unique ID, the client can find it
        in the response.
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserPost" }

      responses: 
        "201":
          description: User post created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserpostID" }
  
  /users/{user-id}/stream/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getMyStream
      summary: Get the list of user posts recently uploaded by followed users
      description: Return the list of the followed user's posts
      
      responses:
        "200":
          description: List of followed users has been successfully returned
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/UserPost" }
                minItems: 0
                maxItems: 999
  
  /users/{user-id}/bans/:
    parameters:
    - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getBannedUsers
      summary: Get the list of banned users
      description: Return the list of the users that have been banned by the authenticated user.
      
      responses: 
        "200":
          description: List of banned users returned successfully 
          content:
            application/json: 
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: banUser
      summary: Ban a user
      description: Add a username to the bans collection.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      
      responses:
        "200":
          description: User has been banned successfully 
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
  
  /users/{user-id}/bans/{user-name}:
    parameters:
      - $ref: "#/components/parameters/UserName"
      - $ref: "#/components/parameters/UserID"
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: unbanUser
      summary: unban user
      description: Delete username from bans collection.
      
      responses:
        "204": { description: User has been unbanned successfully }
  
  /users/{user-id}/followers/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getFollowers
      summary: Get the list of followers
      description: Return the list of the user's followers
      
      responses:
        "200":
          description: List of followers returned successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
  
  /users/{user-id}/following/:
    parameters:
      - $ref: "#/components/parameters/UserName"
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: getFollowing
      summary: Get the list of users followed by the user
      description: Return the list of the user's following
      
      responses:
        "200":
          description: List of following returned successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: followUser
      summary: Follow a user
      description: Add a username to the following collection.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      
      responses:
        "200":
          description: User has been followed successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
  
  /users/{user-id}/following/{user-name}/:
    parameters:
      - $ref: "#/components/parameters/UserName"
      - $ref: "#/components/parameters/UserID"
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["relationship"]
      operationId: unfollowUser
      summary: Stop following this user
      description: Delete username from following collection.
      
      responses:
        "204": {description: User has been unfollowed successfully }
  
  /usersposts/{userpost-id}:
    parameters:
      - $ref: "#/components/parameters/UserPostID"
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: deletePhoto
      summary: delete user post
      description: Delete user post from users posts collection.
      
      responses:
        "204": { description: Photo has been successfully deleted }

  /usersposts/{userpost-id}/likes/:
    parameters:
      - $ref: "#/components/parameters/UserPostID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: getLikes
      summary: Get the likes of the user post
      description: Return the list of likes of the user post.
      
      responses:
        "200":
          description: List of likes returned successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
              
    post:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: likePhoto
      summary: like a user post
      description: Add a username to likes collection
      
      responses:
        "200":
          description: Like addedd successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPost" }
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: unlikePhoto
      summary: Remove like of logged user from user post
      description: Delete username of logged user from likes collection.
      
      responses:
        "204": { description: like has been successfully removed }
  
  /usersposts/{userpost-id}/comments/:
    parameters:
      - $ref: "#/components/parameters/UserPostID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["userPost"]
      operationId: getComments
      summary: Get the comments of the user post
      description: Return the list of comments of the user post.
      
      responses:
        "200":
          description: List of comments returned successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Comment" }
                minItems: 0
                maxItems: 99
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: commentPhoto
      summary: Create a comment to a user post
      description: |-
        Create a comment using the content in the request body.
        The server will create a new unique ID, the client can find it in the response.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      
      responses:
        "201":
          description: Comment created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentID" }
  
  /comments/{comment-id}:
    parameters:
      - $ref: "#/components/parameters/CommentID"
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["user"]
      operationId: uncommentPhoto
      summary: Remove comment from user post
      description: |-
        Remove comment from the system.
        A comment can be removed only if it belongs to the logged user.
      
      responses:
        "204": { description: Comment has been successfully deleted }
