openapi: 3.0.0 

info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments thanks to WASAPhoto! 
    You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

servers:
  - url: http://localhost:3000

tags:
  - name: Login
    description: Login process
  - name: User
    description: Everything about a user
  - name: Relationship
    description: Everything about relationships with other users
  - name: Media
    description: Everything about a media

components:

  securitySchemes:
    bearerAuthentication: 
      type: http
      scheme: bearer

  parameters:
    UserID:
      description: Immutable public user identifier
      schema: { $ref: "#/components/schemas/UserID" }
      name: userid
      in: path
      required: true
    
    MediaID:
      description: Immutable user post identifier
      schema: { $ref: "#/components/schemas/MediaID" }
      name: mediaid
      in: path
      required: true
    
    CommentID:
      description: Immutable comment identifier
      schema: { $ref: "#/components/schemas/CommentID" }
      name: commentid
      in: path
      required: true
  
  responses:
  
    UnAuthorized:
      description: Forbidden, you do not have the necessary permissions.
      
    InternalServerError:
      description: The server encountered an Internal Error.
      
    BadRequest: 
      description: The request was not compliant with the documentation.

  
  schemas:
  
    Username:
      description: Public changeable user-defined unique identifier
      type: string
      pattern: ^[a-zA-Z0-9._]+$
      minLength: 5
      maxLength: 20

    UserID:
      description: Public immutable server-defined unique identifier
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 20
      readOnly: true
    
    MediaID:
      description: Unique media identifier
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 20
      readOnly: true
    
    CommentID:
      description: Unique comment identifier
      type: string
      pattern: ^[a-zA-Z0-9-]+$
      minLength: 1
      maxLength: 20
      readOnly: true
    
    Profile:
      description: |-
        This object represents the profile of a user.
        The profile has a UserID, Username, Bio, profile picture, number of photos, number of followers and number of following.
      type: object
      properties:
        UserID: { $ref: "#/components/schemas/UserID" }
        Username: { $ref: "#/components/schemas/Username" }
        Bio:
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the user, a sequence of numbers, anything.
            It is displayed to other users underneath the profile picture.
          type: string
          pattern: '^[a-zA-Z0-9,._:;?!\x27\- ]*$'
          minLength: 0
          maxLength: 150
        ProfilePic:
          description: Photo that is displayed next to username, bio and counts in the user profile
          type: string
          pattern: '^[a-zA-Z0-9-_]*\.(png|jpg|jpeg)$'
          minLength: 0
          maxLength: 200
        NMedia:
          description: Number of media uploaded by the user
          type: integer
        NFollowers:
          description: Number of followers
          type: integer
        NFollowing:
          description: number of following
          type: integer
    
    Media:
      description: |-
        This object represents the media of a user.
        The media has an MediaID, AuthorID, AuthorUsername, Date, Caption, Photo.
      type: object
      properties:
        MediaID: { $ref: "#/components/schemas/MediaID" }
        AuthorName: { $ref: "#/components/schemas/Username" }
        Date:
          description: Date and time in which the post was created
          type: string
          format: date-time
          minLength: 24
          maxLength: 26
        Caption:
          description: |-
            Short 150 character summary of whatever the user wants.
            It can be movie quotes, description of the photo, a sequence of numbers, anything.
            It is displayed to other users underneath the photo.
          type: string
          pattern: '^[a-zA-Z0-9,._:;?!\x27\- ]*$'
          minLength: 0
          maxLength: 50
        Photo:
          description: Photo content of the user post
          type: string
          pattern: '^[a-zA-Z0-9-_]*\.(png|jpg|jpeg)$'
          minLength: 0
          maxLength: 200
        NLikes:
          description: Number of likes
          type: integer
        NComments:
          description: Number of comments
          type: integer
        Liked:
          description: true if logged user has liked the media, false otherwise
          type: boolean
        
    
    ShortProfile:
      description: |-
        This object represents the short version of the profile of a user.
        It is needed when retrieving a list of users (followers, likes, bans, following).
        The profile has a username and a profile picture.
      type: object
      properties:
        Username: { $ref: "#/components/schemas/Username" }
        ProfilePic:
          description: URL to profile picture of the user
          type: string
          pattern:  '^[a-zA-Z0-9-_]*\.(png|jpg|jpeg)$'
          minLength: 0
          maxLength: 200
              
    Comment:
      description: |-
        This object represents a comment to a photo.
        A comment has an id, author, authorID, date, content.
      type: object
      properties:
        CommentID: { $ref: "#/components/schemas/CommentID" }
        AuthorName: { $ref: "#/components/schemas/Username" }
        Date:
          description: Date of creation of the comment
          type: string
          format: date-time
          minLength: 24
          maxLength: 26
        Content:
          description: Content of the comment
          type: string
          pattern:  '^[a-zA-Z0-9,._:;?!\x27\- ]*$'
          minLength: 0
          maxLength: 150
          
paths:

  /session/:
    post:
      tags: ["Login"]
      operationId: doLogin
      summary: Log in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      requestBody:
        description: Username of the user who wants to login
        content:
          application/json: 
              schema: { $ref: "#/components/schemas/Username" }
        required: true

      responses:
        '200':
          description: User already existed. Returning user ID present in the database.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserID' }
        '201':
          description: User created. Returning created user ID.
          content:
              application/json: 
                schema: { $ref: "#/components/schemas/UserID" }
        '400': {description: Bad request. Invalid username or not parseable JSON}
        '500': {$ref: "#/components/responses/InternalServerError" }
  
  /users/:

    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getUserProfile
      summary: Get the profile of the specified user 
      description: Return the profile of the specified user.
      parameters:
        - name: Username
          in: query
          description: Username to filter by
          required: false
          schema:
              $ref: '#/components/schemas/Username'
      
      responses: 
        "200":
          description: User profile returned successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/Profile" } 
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "404": { description: User not found }
        "500": {$ref: "#/components/responses/InternalServerError"}
  
  /users/{userid}:
    parameters:
      - $ref: "#/components/parameters/UserID"

    patch:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: setMyUserName
      summary: Modify the username of the specified user
      description: |-
        Modifies username of the specified user with the username specified in the body of the request.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      responses: 
        "200":
          description: User profile updates successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/Profile" }
        "204": 
          description: No content. Update occured but didn't send back any representation or description.
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": {$ref : '#/components/responses/UnAuthorized'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    put:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: updateUserProfile
      summary: Modify the profile of the specified user
      description: |-
        Modifies username and bio and profile pic of the specified user with the username/bio/profile pic specified in the body of the request.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Profile" }
      responses: 
        "200":
          description: User profile updates successfully 
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/Profile" }
        "204":
          description: No content. Update occured but didn't send back any representation or description.
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": {$ref: "#/components/responses/InternalServerError"}
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      summary: Delete my profile
      description: |-
        Deletes profile of a user only if the user matches the logged user.
      operationId: deleteUserProfile
      responses:
        "204": { description: User deleted successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": {$ref: "#/components/responses/InternalServerError"}
  
  /users/{userid}/media/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getUserMedia
      summary: Get the collection of media of a user 
      description: |-
        It should return the collection of the user media in reverse cronological order.
        
      responses:
        "200":
          description: Collection of media of the user returned successfully
          content:
            application/json:
              schema:
                description: Collection of media
                type: array
                items: { $ref: "#/components/schemas/Media" }
                minItems: 0
                maxItems: 200
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }

    post:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: uploadPhoto
      summary: Add user post ID to the collection
      description: |-
        Add user post in the request body to the public collection of user posts.
        Then add the user post ID to the private collection of userpostsID.
        The server will create a new unique ID, the client can find it in the response.
      requestBody: 
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Media" }

      responses: 
        "201":
          description: User post created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MediaID" }
        
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{userid}/stream/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getMyStream
      summary: Get the collection of user posts recently uploaded by followed users
      description: |-
        The stream has the ID of media of users followed.
        It should return the collection of the followed user's media in reverse cronological order.
  
      responses:
        "200":
          description: Collection of media of followed users returned successfully
          content:
            application/json:
              schema:
                description: Array of followed user's media
                type: array
                items: { $ref: "#/components/schemas/Media" }
                minItems: 0
                maxItems: 200
        "204": { description: No content. User still doesn't follow any user.}
  
  /users/{userid}/banned/:
    parameters:
    - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getBannedUsers
      summary: Get the collection of banned users
      description: |-
        The banned collection is a collection of user IDs.
        It should return the collection of the users short profiles that have been banned by the user in the path.
      
      responses: 
        "200":
          description: Collection of banned users returned successfully 
          content:
            application/json: 
              schema:
                description: Array of banned user's short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    
  
  /users/{userid}/banned/{bannedid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - name: bannedid
        in: path
        required: true
        description: User who is banning
        schema:
          { $ref: "#/components/schemas/UserID" }

    put:
      security:
      - bearerAuthentication: []
      tags: ["Relationship"]
      operationId: banUser
      summary: Add user to banned collection
      description: Add a user to the collection of banned users. A banned user cannot see any information of the user who banned him.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserID'
      responses:
        "201":
          description: User has been banned successfully 
          content:
            application/json:
              schema:
                description: array of banned user's short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "204": {description: User already banned.}
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "404": { description: User not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
                
    delete:
      security:
      - bearerAuthentication: []
      tags: ["Relationship"]
      operationId: unbanUser
      summary: Remove user ID from banned collection
      description: Delete userID from the collection of banned users IDs.
  
      responses:
        "204": { description: User has been unbanned successfully }
        "404": { description: Banned user not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{userid}/followers/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getUserFollowers
      summary: Get the collection of followers
      description: |-
        The followers collection is a collection of user IDs.
        It should return the collection of the users' short profiles that belong to the collection of followers IDs.
      
      responses:
        "200":
          description: Collection of followers returned successfully
          content:
            application/json:
              schema:
                description: array of followers' short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
  
  /users/{userid}/followings/:
    parameters:
      - $ref: "#/components/parameters/UserID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["User"]
      operationId: getFollowing
      summary: Get the collection of following users
      description: |-
        The followings collection is a collection of user IDs.
        It should return the collection of the users' short profiles that belong to the collection of users that are followed by the user
      
      responses:
        "200":
          description: List of following returned successfully
          content:
            application/json:
              schema:
                description: array of short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
  
  /users/{userid}/followings/{followingid}:
    parameters:
      - $ref: "#/components/parameters/UserID"
      - name: followingid
        in: path
        required: true
        description: User who is following
        schema:
          { $ref: "#/components/schemas/UserID" }
    
    put:
      security:
      - bearerAuthentication: []
      tags: ["Relationship"]
      operationId: followUser
      summary: Add user ID to followings collection
      description: Add a user ID to followings collection.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserID'
      
      responses:
        "201":
          description: User has been followed successfully
          content:
            application/json:
              schema:
                description: Array of following users' short profiles
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "204": {description: Already following current user.}
        "400": { $ref: "#/components/responses/BadRequest" }        
        '403': {$ref : '#/components/responses/UnAuthorized'}  
        "500": { $ref: "#/components/responses/InternalServerError" }      
                
    delete:
      security:
      - bearerAuthentication: []
      tags: ["Relationship"]
      operationId: unfollowUser
      summary: Remove user ID from followings collection
      description: Delete username from following collection.
      
      responses:
        "204": {description: User has been unfollowed successfully }
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "404": { description: Folloed user not found } 
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /media/{mediaid}:
    parameters:
      - $ref: "#/components/parameters/MediaID"

    delete:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: deletePhoto
      summary: delete media
      description: Delete user post from media collection.
      
      responses:
        "204": { description: Media has been successfully deleted }
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "404": { description: Media not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    get:
        security:
        - bearerAuthentication: []
        tags: ["Media"]
        operationId: getMedia
        summary: Get a media with a specified mediaid
        description: Return a media object with a specified mediaid
      
        responses:
         "200":
            description: Collection of likes returned successfully
            content:
              application/json:
                schema: {$ref: '#/components/schemas/Media'}
         "400": { $ref: "#/components/responses/BadRequest" }
         '403': {$ref : '#/components/responses/UnAuthorized'}
         "500": { $ref: "#/components/responses/InternalServerError" }

  /media/{mediaid}/likes/:
    parameters:
      - $ref: "#/components/parameters/MediaID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: getMediaLikes
      summary: Get the collection of likes of the media
      description: Return the collection of likes of the media.
      
      responses:
        "200":
          description: Collection of likes returned successfully
          content:
            application/json:
              schema:
                description: Array of short profiles of users in the likes collection
                type: array
                items: { $ref: "#/components/schemas/ShortProfile" }
                minItems: 0
                maxItems: 999
        "400": { $ref: "#/components/responses/BadRequest" }
        '403': {$ref : '#/components/responses/UnAuthorized'}
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /media/{mediaid}/likes/{likeid}:
    parameters:
      - $ref: "#/components/parameters/MediaID"
      - name: likeid
        in: path
        required: true
        description: User who is liking the photo
        schema:
          { $ref: "#/components/schemas/UserID" }
    
    put:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: likePhoto
      summary: Add a like to the collection of likes
      description: |-
        Add a user ID to likes collection.
        Notice that this can be done only if the user ID does not match to the author ID of the media.
      
      responses:
        "201":
          description: User's like addedd successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserID" }
        "204": {description: Liked already.}
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/UnAuthorized" }
        "500": { $ref: "#/components/responses/InternalServerError"}
    
    delete:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: unlikePhoto
      summary: Remove like from the collection of likes
      description: |- 
        Remove a user ID from the likes collections.
        Notice this can be done only if the user ID corresponds to the id of the logged user.
      
      responses:
        "204": { description: like has been successfully removed }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/UnAuthorized" }
        "404": { description: Your like was not found }
        "500": { $ref: "#/components/responses/InternalServerError"}

  /media/{mediaid}/comments/:
    parameters:
      - $ref: "#/components/parameters/MediaID"
    
    get:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: getMediaComments
      summary: Get the comments of the media
      description: Return the collection of comments of the media.
      
      responses:
        "200":
          description: Collection of comments returned successfully
          content:
            application/json:
              schema:
                description: Array of comments
                type: array
                items: { $ref: "#/components/schemas/Comment" }
                minItems: 0
                maxItems: 99
    
    post:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: commentPhoto
      summary: Add a comment to the comments collection
      description: |-
        Add comment in the request body to the public collection of comments.
        Then add the comment ID to the private collection of comments.
        The server will create a new unique ID, the client can find it in the response.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      
      responses:
        "201":
          description: Comment created successfully.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentID" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/UnAuthorized" }
        "500": { $ref: "#/components/responses/InternalServerError"}
    
  
  /comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/CommentID"

    delete:
      security:
      - bearerAuthentication: []
      tags: ["Media"]
      operationId: uncommentPhoto
      summary: Remove comment from the comments collection
      description: |-
        Remove comment from the system.
        A comment can be removed only if it belongs to the logged user.
      
      responses:
        "204": { description: Comment has been successfully deleted }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/UnAuthorized" }
        "404": { description: Comment not found }
        "500": { $ref: "#/components/responses/InternalServerError"}

